{
  "version": 3,
  "sources": ["../../node_modules/dotenv/lib/main.js", "../../node_modules/dotenv/lib/env-options.js", "../../node_modules/dotenv/lib/cli-options.js", "browser-route-module:/home/bruno.vasconcellos/projects/github-remix/app/root.tsx?browser", "../../app/root.tsx", "../../node_modules/dotenv/config.js"],
  "sourcesContent": ["const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parser src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"])([\\s\\S]+)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _log (message) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = _resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // Specifying an encoding returns a string instead of a buffer\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }))\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else {\n        if (override === true) {\n          process.env[key] = parsed[key]\n        }\n\n        if (debug) {\n          if (override === true) {\n            _log(`\"${key}\" is already defined in \\`process.env\\` and WAS overwritten`)\n          } else {\n            _log(`\"${key}\" is already defined in \\`process.env\\` and was NOT overwritten`)\n          }\n        }\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    if (debug) {\n      _log(`Failed to load ${dotenvPath} ${e.message}`)\n    }\n\n    return { error: e }\n  }\n}\n\nconst DotenvModule = {\n  config,\n  parse\n}\n\nmodule.exports.config = DotenvModule.config\nmodule.exports.parse = DotenvModule.parse\nmodule.exports = DotenvModule\n", "// ../config.js accepts options via environment variables\nconst options = {}\n\nif (process.env.DOTENV_CONFIG_ENCODING != null) {\n  options.encoding = process.env.DOTENV_CONFIG_ENCODING\n}\n\nif (process.env.DOTENV_CONFIG_PATH != null) {\n  options.path = process.env.DOTENV_CONFIG_PATH\n}\n\nif (process.env.DOTENV_CONFIG_DEBUG != null) {\n  options.debug = process.env.DOTENV_CONFIG_DEBUG\n}\n\nif (process.env.DOTENV_CONFIG_OVERRIDE != null) {\n  options.override = process.env.DOTENV_CONFIG_OVERRIDE\n}\n\nmodule.exports = options\n", "const re = /^dotenv_config_(encoding|path|debug|override)=(.+)$/\n\nmodule.exports = function optionMatcher (args) {\n  return args.reduce(function (acc, cur) {\n    const matches = cur.match(re)\n    if (matches) {\n      acc[matches[1]] = matches[2]\n    }\n    return acc\n  }, {})\n}\n", "export { default, meta } from \"/home/bruno.vasconcellos/projects/github-remix/app/root.tsx\";", "import {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration\n} from \"remix\";\nimport type { MetaFunction } from \"remix\";\nimport 'dotenv/config'\n\nexport const meta: MetaFunction = () => {\n  return { title: \"New Remix App\" };\n};\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        {process.env.NODE_ENV === \"development\" && <LiveReload />}\n      </body>\n    </html>\n  );\n}\n", "(function () {\n  require('./lib/main').config(\n    Object.assign(\n      {},\n      require('./lib/env-options'),\n      require('./lib/cli-options')(process.argv)\n    )\n  )\n})()\n"],
  "mappings": "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",
  "names": []
}
